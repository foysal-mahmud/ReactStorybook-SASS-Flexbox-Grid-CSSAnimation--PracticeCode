/* When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current style to the new style at certain times. */

@keyframes example1 {
  from {
    background-color: red;
  }
  to {
    background-color: yellow;
  }
}

@keyframes example2 {
  0% {
    background-color: red;
  }
  25% {
    background-color: yellow;
  }
  50% {
    background-color: blue;
  }
  100% {
    background-color: green;
  }
}

@keyframes example3 {
  0% {
    background-color: red;
    left: 0px;
    top: 0px;
  }
  25% {
    background-color: yellow;
    left: 200px;
    top: 0px;
  }
  50% {
    background-color: blue;
    left: 200px;
    top: 200px;
  }
  75% {
    background-color: green;
    left: 0px;
    top: 200px;
  }
  100% {
    background-color: red;
    left: 0px;
    top: 0px;
  }
}

.mainDiv {
  width: 100px;
  height: 100px;
  background-color: red;
  /* CSS Animation */
  animation-name: example3;
  animation-duration: 4s; /* default value is 0s (0 seconds). */
  animation-delay: 2s; /* 2 seconds delay before starting the animation 
  Negative (-2s;) - The animation will start as if it had already been playing for 2 seconds */
  position: relative; /* For - example3 */

  animation-iteration-count: 3; /* specifies the number of times an animation should run. also can use (: infinite;) */

  /* normal - The animation is played as normal (forwards). This is default
    reverse - The animation is played in reverse direction (backwards)
    alternate - The animation is played forwards first, then backwards
    alternate-reverse - The animation is played backwards first, then forwards */
  animation-direction: alternate-reverse;
}

/* -------------------------------------------------- */

div {
  width: 100px;
  height: 50px;
  background-color: rgb(11, 127, 143);
  font-weight: bold;
  position: relative;
  animation: mymove 5s infinite;
}

@keyframes mymove {
  from {
    left: 0px;
  }
  to {
    left: 300px;
  }
}

/* -------------------------------------------------
The animation-timing-function property can have the following values:

ease - Specifies an animation with a slow start, then fast, then end slowly (this is default)
linear - Specifies an animation with the same speed from start to end
ease-in - Specifies an animation with a slow start
ease-out - Specifies an animation with a slow end
ease-in-out - Specifies an animation with a slow start and end
cubic-bezier(n,n,n,n) - Lets you define your own values in a cubic-bezier function
cubic-bezier(0.25,0.1,0.25,1);

*/

#div1 {
  animation-timing-function: linear;
}
#div2 {
  animation-timing-function: ease;
}
#div3 {
  animation-timing-function: ease-in;
}
#div4 {
  animation-timing-function: ease-out;
}
#div5 {
  animation-timing-function: ease-in-out;
}

/* -----------------------------------------

The animation-fill-mode property specifies a style for the target element when the animation is not playing (before it starts, after it ends, or both).

The animation-fill-mode property can have the following values:

none - Default value. Animation will not apply any styles to the element before or after it is executing
forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)
backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period
both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions

*/

.fillDiv {
  width: 100px;
  height: 100px;
  background: blueviolet;
  position: relative;
  animation-name: filDivExample;
  animation-duration: 3s;
  animation-delay: 1s;
  animation-fill-mode: backwards;
}

@keyframes filDivExample {
  from {
    top: 0px;
    background-color: yellow;
  }
  to {
    top: 200px;
  }
}

/* animation-play-state: running; / paused; */

/* -------------------

div {
  animation-name: example;
  animation-duration: 5s;
  animation-timing-function: linear;
  animation-delay: 2s;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}

OR,

div {
  animation: example 5s linear 2s infinite alternate;
}

*/
